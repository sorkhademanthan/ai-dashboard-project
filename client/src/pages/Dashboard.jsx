// client/src/pages/Dashboard.jsx
import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import axios from '../api/axios';
import { useNavigate } from 'react-router-dom';

export default function Dashboard() {
  const [tasks, setTasks] = useState([]);
  const [form, setForm] = useState({ title: '', description: '', dueDate: '' });
  const [aiPrompt, setAiPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [user, setUser] = useState(null);
  const [activeTab, setActiveTab] = useState('all');
  const navigate = useNavigate();

  const token = localStorage.getItem('token');
  const authHeader = { headers: { Authorization: `Bearer ${token}` } };

  // Fetch user profile
  const fetchUser = async () => {
    try {
      const res = await axios.get('/users/profile', authHeader);
      setUser(res.data);
    } catch (err) {
      console.error('Error fetching user:', err);
    }
  };

  // Fetch tasks
  const fetchTasks = async () => {
    try {
      const res = await axios.get('/tasks', authHeader);
      setTasks(res.data);
    } catch (err) {
      console.error('Error fetching tasks:', err);
      if (err.response?.status === 401) {
        localStorage.removeItem('token');
        navigate('/');
      }
    }
  };

  useEffect(() => {
    fetchTasks();
    fetchUser();
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Handle task form input
  const handleChange = (e) =>
    setForm({ ...form, [e.target.name]: e.target.value });

  // Submit new task manually
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.post('/tasks', form, authHeader);
      setForm({ title: '', description: '', dueDate: '' });
      fetchTasks();
    } catch (err) {
      console.error('Error creating task:', err);
      alert('Failed to create task');
    }
  };

  // Delete task
  const handleDelete = async (id) => {
    try {
      await axios.delete(`/tasks/${id}`, authHeader);
      fetchTasks();
    } catch (err) {
      console.error('Error deleting task:', err);
    }
  };

  // Mark task as completed
  const markAsCompleted = async (id) => {
    try {
      await axios.put(`/tasks/${id}`, { completed: true }, authHeader);
      fetchTasks();
    } catch (err) {
      console.error('Error marking task complete:', err);
    }
  };

  // Handle AI Task Generation
  const handleAIGenerate = async (e) => {
    e.preventDefault();
    if (!aiPrompt.trim()) return;

    setIsGenerating(true);
    try {
      const res = await axios.post('/ai/generate', { prompt: aiPrompt }, authHeader);
      const text = res.data.tasks;

      // Parse response (expects lines like "1. Task Title")
      const lines = text.split('\n').filter(line => line.trim() !== '');
      for (const line of lines) {
        const cleanLine = line.replace(/^\d+\.\s*/, '').trim();
        if (cleanLine) {
          await axios.post('/tasks', {
            title: cleanLine,
            description: 'Generated by AI',
            dueDate: new Date().toISOString().split('T')[0]
          }, authHeader);
        }
      }

      setAiPrompt('');
      fetchTasks();
    } catch (err) {
      console.error('Error generating AI tasks:', err);
      alert('AI task generation failed');
    } finally {
      setIsGenerating(false);
    }
  };

  // Filter tasks based on active tab
  const filteredTasks = tasks.filter(task => {
    if (activeTab === 'all') return true;
    if (activeTab === 'pending') return !task.isCompleted;
    if (activeTab === 'completed') return task.isCompleted;
    return true;
  });

  // Calculate statistics
  const stats = {
    total: tasks.length,
    completed: tasks.filter(t => t.isCompleted).length,
    pending: tasks.filter(t => !t.isCompleted).length,
    overdue: tasks.filter(t => !t.isCompleted && new Date(t.dueDate) < new Date()).length
  };

  const logout = () => {
    localStorage.removeItem('token');
    navigate('/');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white">
      {/* Background Effects */}
      <div className="fixed inset-0 bg-[radial-gradient(ellipse_at_top_right,_var(--tw-gradient-stops))] from-purple-900/20 via-slate-900/20 to-indigo-900/20 pointer-events-none"></div>
      <div className="fixed inset-0 opacity-20 pointer-events-none">
        <div className="absolute inset-0 bg-gradient-to-br from-purple-500/5 via-transparent to-indigo-500/5"></div>
        <div className="absolute top-1/4 left-1/4 w-2 h-2 bg-white/10 rounded-full"></div>
        <div className="absolute top-3/4 right-1/4 w-2 h-2 bg-white/10 rounded-full"></div>
      </div>
      
      {/* Main Content */}
      <div className="relative z-10 p-6 max-w-7xl mx-auto">
        {/* Header */}
        <motion.header 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8"
        >
          <div className="mb-4 md:mb-0">
            <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-400 via-pink-400 to-indigo-400 bg-clip-text text-transparent mb-2">
              AI Task Dashboard
            </h1>
            <p className="text-lg text-gray-300">
              Welcome back, {user?.name || 'User'}! Let's get productive today.
            </p>
          </div>
          
          <div className="flex items-center space-x-4">
            <button 
              onClick={() => navigate('/profile')}
              className="bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 px-6 py-3 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-purple-500/25"
            >
              <span className="mr-2">👤</span>
              Profile
            </button>
            <button 
              onClick={logout}
              className="bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 px-6 py-3 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-red-500/25"
            >
              <span className="mr-2">🚪</span>
              Logout
            </button>
          </div>
        </motion.header>

        {/* Stats Cards */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8"
        >
          <div className="bg-gradient-to-br from-blue-500/20 to-blue-600/20 backdrop-blur-xl border border-blue-500/30 rounded-2xl p-6 hover:scale-105 transition-transform duration-300">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-blue-200 text-sm font-medium">Total Tasks</p>
                <p className="text-3xl font-bold text-blue-100">{stats.total}</p>
              </div>
              <div className="bg-blue-500/30 p-3 rounded-full">
                <span className="text-2xl">📋</span>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-green-500/20 to-green-600/20 backdrop-blur-xl border border-green-500/30 rounded-2xl p-6 hover:scale-105 transition-transform duration-300">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-green-200 text-sm font-medium">Completed</p>
                <p className="text-3xl font-bold text-green-100">{stats.completed}</p>
              </div>
              <div className="bg-green-500/30 p-3 rounded-full">
                <span className="text-2xl">✅</span>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-yellow-500/20 to-yellow-600/20 backdrop-blur-xl border border-yellow-500/30 rounded-2xl p-6 hover:scale-105 transition-transform duration-300">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-yellow-200 text-sm font-medium">Pending</p>
                <p className="text-3xl font-bold text-yellow-100">{stats.pending}</p>
              </div>
              <div className="bg-yellow-500/30 p-3 rounded-full">
                <span className="text-2xl">⏳</span>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-red-500/20 to-red-600/20 backdrop-blur-xl border border-red-500/30 rounded-2xl p-6 hover:scale-105 transition-transform duration-300">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-red-200 text-sm font-medium">Overdue</p>
                <p className="text-3xl font-bold text-red-100">{stats.overdue}</p>
              </div>
              <div className="bg-red-500/30 p-3 rounded-full">
                <span className="text-2xl">⚠️</span>
              </div>
            </div>
          </div>
        </motion.div>

        {/* AI Task Generation */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="mb-8"
        >
          <div className="bg-gradient-to-r from-purple-600/10 to-indigo-600/10 backdrop-blur-xl border border-purple-500/30 rounded-2xl p-8 hover:border-purple-400/50 transition-all duration-300">
            <div className="flex items-center mb-6">
              <div className="bg-gradient-to-r from-purple-500 to-indigo-500 p-3 rounded-full mr-4">
                <span className="text-2xl">🧠</span>
              </div>
              <div>
                <h2 className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-indigo-400 bg-clip-text text-transparent">
                  AI Task Generator
                </h2>
                <p className="text-gray-300">Let AI help you create productive tasks</p>
              </div>
            </div>
            
            <form onSubmit={handleAIGenerate} className="space-y-4">
              <div className="relative">
                <input
                  type="text"
                  placeholder="e.g., Create 5 productivity tasks for a software developer"
                  value={aiPrompt}
                  onChange={(e) => setAiPrompt(e.target.value)}
                  className="w-full p-4 bg-white/5 border border-gray-600/50 rounded-xl text-white placeholder-gray-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 transition-all duration-300"
                  required
                />
                <div className="absolute inset-y-0 right-4 flex items-center">
                  <span className="text-gray-400">✨</span>
                </div>
              </div>
              
              <button 
                type="submit" 
                disabled={isGenerating}
                className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 disabled:from-gray-600 disabled:to-gray-700 px-6 py-4 rounded-xl font-semibold transition-all duration-300 transform hover:scale-[1.02] disabled:hover:scale-100 shadow-lg hover:shadow-purple-500/25"
              >
                {isGenerating ? (
                  <span className="flex items-center justify-center">
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Generating with AI...
                  </span>
                ) : (
                  <span className="flex items-center justify-center">
                    <span className="mr-2">🚀</span>
                    Generate Tasks with AI
                  </span>
                )}
              </button>
            </form>
          </div>
        </motion.div>

        {/* Manual Task Creation */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="mb-8"
        >
          <div className="bg-gradient-to-r from-green-600/10 to-emerald-600/10 backdrop-blur-xl border border-green-500/30 rounded-2xl p-8 hover:border-green-400/50 transition-all duration-300">
            <div className="flex items-center mb-6">
              <div className="bg-gradient-to-r from-green-500 to-emerald-500 p-3 rounded-full mr-4">
                <span className="text-2xl">➕</span>
              </div>
              <div>
                <h2 className="text-2xl font-bold bg-gradient-to-r from-green-400 to-emerald-400 bg-clip-text text-transparent">
                  Create New Task
                </h2>
                <p className="text-gray-300">Add tasks manually with full control</p>
              </div>
            </div>
            
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <input
                  type="text"
                  name="title"
                  placeholder="Task Title"
                  value={form.title}
                  onChange={handleChange}
                  className="p-4 bg-white/5 border border-gray-600/50 rounded-xl text-white placeholder-gray-400 focus:border-green-500 focus:ring-2 focus:ring-green-500/20 transition-all duration-300"
                  required
                />
                <input
                  type="date"
                  name="dueDate"
                  value={form.dueDate}
                  onChange={handleChange}
                  className="p-4 bg-white/5 border border-gray-600/50 rounded-xl text-white focus:border-green-500 focus:ring-2 focus:ring-green-500/20 transition-all duration-300"
                  required
                />
              </div>
              
              <textarea
                name="description"
                placeholder="Task Description"
                value={form.description}
                onChange={handleChange}
                rows={3}
                className="w-full p-4 bg-white/5 border border-gray-600/50 rounded-xl text-white placeholder-gray-400 focus:border-green-500 focus:ring-2 focus:ring-green-500/20 transition-all duration-300 resize-none"
                required
              />
              
              <button 
                type="submit"
                className="w-full bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 px-6 py-4 rounded-xl font-semibold transition-all duration-300 transform hover:scale-[1.02] shadow-lg hover:shadow-green-500/25"
              >
                <span className="flex items-center justify-center">
                  <span className="mr-2">✨</span>
                  Create Task
                </span>
              </button>
            </form>
          </div>
        </motion.div>

        {/* Task Filters */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
          className="mb-6"
        >
          <div className="flex flex-wrap gap-2">
            {['all', 'pending', 'completed'].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`px-6 py-3 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105 ${
                  activeTab === tab
                    ? 'bg-gradient-to-r from-indigo-600 to-purple-600 text-white shadow-lg shadow-indigo-500/25'
                    : 'bg-white/5 text-gray-300 hover:bg-white/10 hover:text-white'
                }`}
              >
                {tab.charAt(0).toUpperCase() + tab.slice(1)} Tasks
              </button>
            ))}
          </div>
        </motion.div>

        {/* Task List */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
          className="space-y-4"
        >
          <AnimatePresence mode="wait">
            {filteredTasks.length === 0 ? (
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                className="text-center py-12"
              >
                <div className="bg-gradient-to-r from-gray-600/20 to-gray-700/20 backdrop-blur-xl border border-gray-500/30 rounded-2xl p-8">
                  <div className="text-6xl mb-4">📝</div>
                  <h3 className="text-2xl font-bold text-gray-300 mb-2">No tasks found</h3>
                  <p className="text-gray-400">Create your first task to get started!</p>
                </div>
              </motion.div>
            ) : (
              filteredTasks.map((task, index) => (
                <motion.div
                  key={task._id}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: 20 }}
                  transition={{ delay: index * 0.1 }}
                  className={`bg-gradient-to-r backdrop-blur-xl border rounded-2xl p-6 hover:scale-[1.02] transition-all duration-300 ${
                    task.isCompleted
                      ? 'from-green-600/10 to-emerald-600/10 border-green-500/30 hover:border-green-400/50'
                      : new Date(task.dueDate) < new Date()
                      ? 'from-red-600/10 to-pink-600/10 border-red-500/30 hover:border-red-400/50'
                      : 'from-blue-600/10 to-indigo-600/10 border-blue-500/30 hover:border-blue-400/50'
                  }`}
                >
                  <div className="flex flex-col md:flex-row md:items-center justify-between">
                    <div className="flex-1 mb-4 md:mb-0">
                      <div className="flex items-center mb-2">
                        <h3 className={`text-xl font-bold ${task.isCompleted ? 'line-through text-gray-400' : 'text-white'}`}>
                          {task.title}
                        </h3>
                        {task.isCompleted && (
                          <span className="ml-2 bg-green-500/20 text-green-400 px-2 py-1 rounded-full text-xs font-medium">
                            ✅ Completed
                          </span>
                        )}
                        {!task.isCompleted && new Date(task.dueDate) < new Date() && (
                          <span className="ml-2 bg-red-500/20 text-red-400 px-2 py-1 rounded-full text-xs font-medium">
                            ⚠️ Overdue
                          </span>
                        )}
                      </div>
                      <p className={`text-gray-300 mb-2 ${task.isCompleted ? 'line-through' : ''}`}>
                        {task.description}
                      </p>
                      <div className="flex items-center text-sm text-gray-400">
                        <span className="mr-4">📅 Due: {new Date(task.dueDate).toLocaleDateString()}</span>
                        <span className={`px-2 py-1 rounded-full text-xs ${
                          task.isCompleted ? 'bg-green-500/20 text-green-400' : 'bg-yellow-500/20 text-yellow-400'
                        }`}>
                          {task.isCompleted ? 'Completed' : 'Pending'}
                        </span>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-3">
                      {!task.isCompleted && (
                        <button
                          onClick={() => markAsCompleted(task._id)}
                          className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 px-4 py-2 rounded-xl font-medium transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-green-500/25"
                        >
                          <span className="mr-1">✅</span>
                          Complete
                        </button>
                      )}
                      <button
                        onClick={() => handleDelete(task._id)}
                        className="bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 px-4 py-2 rounded-xl font-medium transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-red-500/25"
                      >
                        <span className="mr-1">🗑️</span>
                        Delete
                      </button>
                    </div>
                  </div>
                </motion.div>
              ))
            )}
          </AnimatePresence>
        </motion.div>
      </div>
    </div>
  );
}
// This is the main dashboard page where users can manage their tasks

